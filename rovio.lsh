(defclass rovio object
	;properties of the class
	((-str-) user)
	((-str-) password) 
	((-str-) ip)
	((-int-) lastXPos)
	((-bool-) ballSeen)
	((-bool-) hasBall)
	((-bool-) goalSeen)
	((-bool-) scored)
	((-int-) focalLength)
)

;when a method has the same name as the class, it's a constructor
(defmethod rovio rovio (ip_ &optional (resolution 0))
	(setq user "admin")
	(setq password "r0b0t0")
	(setq ip  (concat "192.168.1." ip_))
	(setq lastXPos 0)
	(setq ballSeen f)
	(setq hasBall f)
	(setq goalSeen f)
	(setq scored f)
	(setq focalLength 231)
	
	(==> this set-resolution resolution)
)

(defmethod rovio move (direction speed &optional (loop 5) (wait .1))
	((-int-) direction)
	((-int-) speed)
	(if (or (< speed 0) (> speed 10))
		(error "speed must be between 0 and 10")
	)
	
	(repeat loop
		(==> this command "nav" 18 direction speed)
		(sleep wait)
	)
)

(defmethod rovio stop ()
	(==> this move 0 0 1 .1)
)

(defmethod rovio forward (speed &optional (loop 5) (wait .1))
	(==> this move 1 speed loop wait)
)

(defmethod rovio orbit-right (&optional (speed 5) (loop 1))
	(repeat loop
		(==> this move 3 speed loop .15) ;straight-left
		(==> this move 6 speed loop .07) ;rotate-right
	)
	(==> this stop)
)

(defmethod rovio orbit-left (&optional (speed 5) (loop 1))
	(repeat loop
		(==> this move 4 speed loop .15) ;straight-right
		(==> this move 5 speed loop .07) ;rotate-left
	)
	(==> this stop)
)

(defmethod rovio backward (speed &optional (loop 5) (wait .1))
	(==> this move 2 speed wait)
)

(defmethod rovio straight-left (speed &optional (loop 5) (wait .1))
	(==> this move 3 speed loop wait)
)

(defmethod rovio straight-right (speed &optional (loop 5) (wait .1))
	(==> this move 4 speed loop wait)
)

(defmethod rovio rotate-left (speed &optional (loop 5) (wait .1))
	(==> this move 5 speed loop wait)
)

(defmethod rovio rotate-right (speed &optional (loop 5) (wait .1))
	(==> this move 6 speed loop wait)
)

(defmethod rovio diagonal-forward-left (speed &optional (loop 5) (wait .1))
	(==> this move 7 speed wait)
)

(defmethod rovio diagonal-forward-right (speed &optional (loop 5) (wait .1))
	(==> this move 8 speed wait)
)

(defmethod rovio diagonal-backward-left (speed &optional (loop 5) (wait .1))
	(==> this move 9 speed wait)
)

(defmethod rovio diagonal-backward-right (speed &optional (loop 5) (wait .1))
	(==> this move 10 speed wait)
)

(defmethod rovio head-up ()
	(==> this move 11 0)
)

(defmethod rovio head-down ()
	(==> this move 12 0)
)

(defmethod rovio head-middle ()
	(==> this move 13 0)
)

;; mode 0: 176x144
;; mode 1: 320x240 
;; mode 2: 352x288
;; mode 3: 640x480
(defmethod rovio set-resolution (mode)
	(printf "Setting resolution mode %d... " mode)
	(let (
			(r (sys (sprintf "curl -s \"http://%s:%s@%s/ChangeResolution.cgi?ResType=%d\"" user password ip mode)))
			(grabbed (==> this grab))
		)
		
		(printf "Resolution is: %dx%d\n" (idx-dim grabbed 1) (idx-dim grabbed 0))
	)
)

(defmethod rovio getImageDimensions ()
	(let (
			(grabbed (==> this grab))
		)
		
		(printf "Resolution is: %dx%d\n" (idx-dim grabbed 1) (idx-dim grabbed 0))
	)
)

;brightness can be between 1 and 6
(defmethod rovio changeBrightness (brightness)
	(sys (sprintf "curl -s \"http://%s:%s@%s/ChangeBrightness.cgi?Brightness=%d\"" user password ip brightness))
)

(defmethod rovio changeQuality (framerate ratio)
	(sys (sprintf "curl -s \"http://%s:%s@%s/Cmd.cgi?Cmd=ChangeCompressRatio.cgi&Cmd=ChangeFramerate.cgi&Framerate=%d&Ratio=%d\"" user password ip framerate ratio))
)

(defmethod rovio grab ()
	(let (
			(f (popen 
				(sprintf "curl -s http://%s:%s@%s/Jpeg/CamImg%d.jpg | %s -compress lossless -depth 8 - PPM:-"
					user
					password
					ip
					(int (rand 0 1000))
					@@*convert-cmd*
				)
				"r"
			))
		)
		
		(when (not f)
			(error "couldn't open convert pipe file")
		)
		
		(prog1 (pnm-fread-rgb f) (pclose f))
	)
)

(defmethod rovio command (cmd action param1 param2)
	(let (
			(r (sys 
				(sprintf "curl -s \"http://%s:%s@%s/rev.cgi?Cmd=%s&action=%d&drive=%d&speed=%d\" > /dev/null"
					user
					password
					ip
					cmd
					action
					param1
					param2
				)
			))
		)
	)
)
