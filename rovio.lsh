(load "threshold.lsh")
(libload "libimage/cca") ;;for connected component analysis

(defclass rovio object
	;properties of the class
	((-str-) user)
	((-str-) password) 
	((-str-) ip)
	((-int-) lastXPos)
	((-bool-) ballSeen)
	((-bool-) hasBall)
	((-bool-) goalSeen)
	((-bool-) scored)
	((-int-) focalLength)
)

;load our movement commands
(load "rovio.move.lsh")

;when a method has the same name as the class, it's a constructor
(defmethod rovio rovio (user_ password_ ip_ resolution)
	(setq user user_)
	(setq password password_)
	(setq ip ip_)
	(setq lastXPos 0)
	(setq ballSeen f)
	(setq hasBall f)
	(setq goalSeen f)
	(setq scored f)
	(setq focalLength 231)
	(==> this set-resolution resolution)
)

;; mode 0: 176x144
;; mode 1: 320x240 
;; mode 2: 352x288
;; mode 3: 640x480
(defmethod rovio set-resolution (mode)
	(printf "Setting resolution mode %d... " mode)
	(let (
			(r (sys (sprintf "curl -s \"http://%s:%s@%s/ChangeResolution.cgi?ResType=%d\"" user password ip mode)))
			(grabbed (==> this grab))
		)
		
		(printf "Resolution is: %dx%d\n" (idx-dim grabbed 1) (idx-dim grabbed 0))
	)
)

(defmethod rovio getImageDimensions ()
	(let (
			(grabbed (==> this grab))
		)
		
		(printf "Resolution is: %dx%d\n" (idx-dim grabbed 1) (idx-dim grabbed 0))
	)
)

;brightness can be between 1 and 6
(defmethod rovio changeBrightness (brightness)
	(sys (sprintf "curl -s \"http://%s:%s@%s/ChangeBrightness.cgi?Brightness=%d\"" user password ip brightness))
)

(defmethod rovio changeQuality (framerate ratio)
	(sys (sprintf "curl -s \"http://%s:%s@%s/Cmd.cgi?Cmd=ChangeCompressRatio.cgi&Cmd=ChangeFramerate.cgi&Framerate=%d&Ratio=%d\"" user password ip framerate ratio))
)

(defmethod rovio grab ()
	(let (
			(f (popen 
				(sprintf "curl -s http://%s:%s@%s/Jpeg/CamImg%d.jpg | %s -compress lossless -depth 8 - PPM:-"
					user
					password
					ip
					(int (rand 0 1000))
					@@*convert-cmd*
				)
				"r"
			))
		)
		
		(when (not f)
			(error "couldn't open convert pipe file")
		)
		
		(prog1 (pnm-fread-rgb f) (pclose f))
	)
)

(defmethod rovio command (cmd action param1 param2)
	(let (
			(r (sys 
				(sprintf "curl -s \"http://%s:%s@%s/rev.cgi?Cmd=%s&action=%d&drive=%d&speed=%d\" > /dev/null"
					user
					password
					ip
					cmd
					action
					param1
					param2
				)
			))
		)
	)
)

(defmethod rovio showImage (bwImage)
	(rgb-draw-matrix 20 20 bwImage 1 1)
)

(defmethod rovio search ()
	(if (> lastXPos 0)
		(==> this rotate-right 6 3 .2)
		(==> this rotate-left 6 3 .2)
	)
	
	;;stop moving...
	(==> rov stop)
)

;;since we overshoot once we see something, let's correct back so that we get back to where we're supposed to be
(defmethod rovio correctBack ()
	(if (< lastXPos 0)
		(==> this rotate-right 9 2)
		(==> this rotate-left 9 2)
	)
)

(defmethod rovio searchOrbit () 
	(if (> lastXPos 0)
		(==> rov orbit-left)
		(==> rov orbit-right)
	)
)

(defmethod rovio goToBall (ballLoc)
	(setq hasBall (< (car ballLoc) 30))
	(==> this goToLoc ballLoc)		
)

(defmethod rovio goToLoc (ballLoc)
	(let* (
			(dist (car ballLoc))
			(angle (cdr ballLoc))
		)
		
		(when (> dist 30)
			(if (> angle 10)
				(==> this rotate-right 8)
			)
			
			(if (< angle -10)
				(==> this rotate-left 8)
			)
			
			(==> this forward 2 3)
		)
	)
)

(defmethod rovio getHDistance (middle)
	(let* (
			(delta (* 4 (/ 3.14 180)))
		)
		
		(/ 8 (tan (+ delta (atan(/ middle focalLength)))))
	)
)

(defmethod rovio getADistance (x) 
	(* (atan (/ x focalLength)) (/ 180 3.14))
)

(defmethod rovio getPosBall (image cc callBackLost)
	(let* (
			;for the ball positions
			(left 0)(right 0)(top 0)(bottom 0)
			(imageMiddleX (/ (idx-dim image 1) 2))
			(yDistance 0)(aDistance 0)
		)
	
		(setq left (:cc:ccdesc 0 (cc-left)))
		(setq right (:cc:ccdesc 0 (cc-right)))
		(setq top (:cc:ccdesc 0 (cc-top)))
		(setq bottom (:cc:ccdesc 0 (cc-bottom)))

		(setq yDistance (==> this getHDistance (/ (+ top bottom) 2)))
	
		;calculate the distance we need to turn
		(setq x (- (/ (+ left right) 2) imageMiddleX)) ;find the x position of the ball
		(setq aDistance (==> this getADistance x))
		
		(setq lastXPos x)
	
		(printf "Top: %d - Bottom: %d - Left: %d - Right: %d\n" top bottom left right)
		(printf "yDistance: %f - aDistance: %f\n" yDistance aDistance)
	
		(setq ballSeen t)
		
		(cons yDistance aDistance)
	)
)

(defmethod rovio getPosGoal (image cc callBackLost)
	(let* (
			;for the ball positions
			(left 0)(right 0)(top 0)(bottom 0)
			(imageMiddleX (/ (idx-dim image 0) 2))
			
			(ret ())
		)
		
		(if (= (idx-dim :cc:ccdesc 0) 2)
			(progn
				(printf "Bottom: %d Middle: %d"
					(/ (+ (:cc:ccdesc 0 (cc-bottom)) (:cc:ccdesc 1 (cc-bottom))) 2) 
					(/ (+ (:cc:ccdesc 0 (cc-right)) (:cc:ccdesc 1 (cc-left))) 2)
				)
				(setq goalSeen t)
				(print "goals seen")
			)
			(callBackLost)
			(setq goalSeen f)
		)
		
		ret
	)
)

(defmethod rovio ballLost ()
	(print "lost the ball")
	(setq ballSeen f)
	(==> this search)
)

(defmethod rovio goalLost ()
	(print "lost the goal")
	(setq goalSeen f)
	(==> this searchOrbit)
)

(defmethod rovio getDistance (image callBackFound callBackLost)
	(let* (
			(cc (new CCAnalyzer image))
			(ret ())
		)
		
		(if (==> cc run-analysis 125)
			(progn
				(==> cc cc-analysis)
				(setq ret (callBackFound image cc callBackLost))
			)
			(callBackLost)
		)
		
		ret
	)
)

(de main (&optional (ip "192.168.1.11") (id "admin") (pw "r0b0t0"))
	(let* (
			(image ())
			(rov (new rovio id pw ip 0))
			(window (x11-window 0 0 360 280 "Image"))
			(dist 0)
		)
		
		(==> rov changeBrightness 6) ;;make it so that we can see a bit better
		(==> rov changeQuality 10 3) ;;increase our image quality for a better read
		(==> rov head-down) ;;make sure the head is where it needs to be
		
		(while t
			(setq image (==> rov grab))
			
			(if :rov:hasBall
				(progn
					(setq bwImage (threshold image [148 43 35] 26)) ;;for the goals
					(==> rov showImage bwImage)
					(setq dist (==> rov getDistance bwImage (check==> rovio 'getPosGoal) (check==> rovio 'goalLost)))
					(if :rov:goalSeen
						(==> rov goToLoc dist)
					)
				)
				
				(setq bwImage (threshold image [117 145 43] 26)) ;;for the tennis ball
				(==> rov showImage bwImage)
				(setq dist (==> rov getDistance bwImage (check==> rovio 'getPosBall) (check==> rovio 'ballLost)))
				(if :rov:ballSeen
					(==> rov goToBall dist)
				)
			)
			
			;; don't request too many images or it crashes
			;(sleep .2)
		)
	)
)
