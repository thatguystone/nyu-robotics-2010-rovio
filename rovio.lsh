(load "threshold.lsh")
(libload "libimage/cca") ;;for connected component analysis

(defclass rovio object
	;properties of the class
	((-str-) user)
	((-str-) password) 
	((-str-) ip)
	((-int-) lastXPos)
	((-bool-) ballSeen)
	((-bool-) hasBall)
	((-bool-) goalSeen)
)

;load our movement commands
(load "rovio.move.lsh")

;when a method has the same name as the class, it's a constructor
(defmethod rovio rovio (user_ password_ ip_ resolution)
	(setq user user_)
	(setq password password_)
	(setq ip ip_)
	(setq lastXPos 0)
	(setq hasBall f)
	(==> this set-resolution resolution)
)

;; mode 0: 176x144
;; mode 1: 320x240 
;; mode 2: 352x288
;; mode 3: 640x480
(defmethod rovio set-resolution (mode)
	(printf "Setting resolution mode %d... " mode)
	(let (
			(r (sys (sprintf "curl -s \"http://%s:%s@%s/ChangeResolution.cgi?ResType=%d\"" user password ip mode)))
			(grabbed (==> this grab))
		)
		
		(printf "Resolution is: %dx%d\n" (idx-dim grabbed 1) (idx-dim grabbed 0))
	)
)

(defmethod rovio getImageDimensions ()
	(let (
			(grabbed (==> this grab))
		)
		
		(printf "Resolution is: %dx%d\n" (idx-dim grabbed 1) (idx-dim grabbed 0))
	)
)

;brightness can be between 1 and 6
(defmethod rovio changeBrightness (brightness)
	(sys (sprintf "curl -s \"http://%s:%s@%s/ChangeBrightness.cgi?Brightness=%d\"" user password ip brightness))
)

(defmethod rovio changeQuality (framerate ratio)
	(sys (sprintf "curl -s \"http://%s:%s@%s/Cmd.cgi?Cmd=ChangeCompressRatio.cgi&Cmd=ChangeFramerate.cgi&Framerate=%d&Ratio=%d\"" user password ip framerate ratio))
)

(defmethod rovio grab ()
	(let (
			(f (popen 
				(sprintf "curl -s http://%s:%s@%s/Jpeg/CamImg%d.jpg | %s -compress lossless -depth 8 - PPM:-"
					user
					password
					ip
					(int (rand 0 1000))
					@@*convert-cmd*
				)
				"r"
			))
		)
		
		(when (not f)
			(error "couldn't open convert pipe file")
		)
		
		(prog1 (pnm-fread-rgb f) (pclose f))
	)
)

(defmethod rovio command (cmd action param1 param2)
	(let (
			(r (sys 
				(sprintf "curl -s \"http://%s:%s@%s/rev.cgi?Cmd=%s&action=%d&drive=%d&speed=%d\" > /dev/null"
					user
					password
					ip
					cmd
					action
					param1
					param2
				)
			))
		)
	)
)

(defmethod rovio findTheBall () 
	(if (> lastXPos 0)
		(==> this rotate-right 6 3)
		(==> this rotate-left 6 3)
	)
)

(defmethod rovio showImage (bwImage)
	(rgb-draw-matrix 20 20 bwImage 1 1)
)

(defmethod rovio getDistance (image)
	(let* (
			(cc (new CCAnalyzer image))
			(ret (matrix 4))
			
			;for the ball positions
			(left 0)(right 0)(top 0)(bottom 0)
			
			;for distance stuff
			(yDistance 0)(aDistance 0)
			
			;;constants (just local values, for now) for calculating the distance to the ball
			(delta (* 4 (/ 3.14 180)))
			(imageMiddleX (/ (idx-dim image 0) 2))
			(imageMiddleY (/ (idx-dim image 1) 2))
			(focalLength 231)
			(y 0)(x 0)
		)
		
		(if (==> cc run-analysis 125)
			(progn
				(==> cc cc-analysis)
		
				(setq left (:cc:ccdesc 0 (cc-left)))
				(setq right (:cc:ccdesc 0 (cc-right)))
				(setq top (:cc:ccdesc 0 (cc-top)))
				(setq bottom (:cc:ccdesc 0 (cc-bottom)))
			)
		)
		
		(if (> bottom (* imageMiddleY .7))
			(progn 
				(setq yDistance (/ 8 (tan (+ delta (atan(/ (- bottom imageMiddleY) focalLength))))))
				
				;calculate the distance we need to turn
				(setq x (- (/ (+ left right) 2) imageMiddleX))
				(setq lastXPos x)
				(setq y (- (idx-dim image 1) bottom))
				(setq aDistance (* (atan (/ x y)) (/ 180 3.14)))
				
				(printf "Top: %d - Bottom: %d - Left: %d - Right: %d\n" top bottom left right)
				(printf "yDistance: %f - aDistance: %f\n" yDistance aDistance)
				
				(setq ballSeen t)
			)
			(print "lost the ball")
			(setq ballSeen f)
			(==> this findTheBall)
		)
		
		(cons yDistance aDistance)
	)
)

(defmethod rovio goToball (ballLoc)
	(let* (
			(dist (car ballLoc))
			(angle (cdr ballLoc))
		)
		
		(if (< dist 30)
			(setq hasBall t)
		)
		
		(when (> dist 30)
			(setq hasBall f)
			(==> rov head-down)
			(if (> angle 20)
				(==> this rotate-right 6 4)
			)
			
			(if (< angle -20)
				(==> this rotate-left 6 4)
			)
			
			(==> this forward 2 4)
		)
		
		;(printf "Y: %f - Theta: %f\n" yDist angle)
	)
)


(defmethod rovio goToGoal (goalLoc)
	(let* (
			(dist (car goalLoc))
			(angle (cdr goalLoc))
		)
		
		(when (> dist 30)
			(if (> angle 20)
				(==> this rotate-right 6 4)
			)
			
			(if (< angle -20)
				(==> this rotate-left 6 4)
			)
			
			(==> this forward 2 4)
		)
		
		;(printf "Y: %f - Theta: %f\n" yDist angle)
	)
)

(defmethod rovio findTheGoals () 
	(if (> lastXPos 0)
		(==> this right 6 3)
		(==> this left 6 3)
	)
)

(defmethod rovio findGoal (image)
	(let* (
			(cc (new CCAnalyzer image))
			(ret (matrix 4))
			
			;for the goal positions
			(left 0)(right 0)(top 0)(bottom 0)(middle 0)
			
			;for distance stuff
			(yDistance 0)(aDistance 0)
			
			;;constants (just local values, for now) for calculating the distance to the ball
			(delta (* 4 (/ 3.14 180)))
			(imageMiddleX (/ (idx-dim image 0) 2))
			(imageMiddleY (/ (idx-dim image 1) 2))
			(focalLength 231)
			(y 0)(x 0)
		)
		
		(if (==> cc run-analysis 125)
			(progn
				(==> cc cc-analysis)
				;sees to posts, so set the middle as the middle of both post
				(if (> (idx-dim :cc:desc) 1)	
					(progn
						(setq goalSeen t)
						;if 0 is to the right of 1
						(if (>  (:cc:ccdesc 0 (cc-left))  (:cc:ccdesc 1 (cc-left)))
							(setq middle (-  (:cc:ccdesc 0 (cc-left)) (:cc:ccdesc 1 (cc-right)) ))
						)
						(if (<  (:cc:ccdesc 0 (cc-left))  (:cc:ccdesc 1 (cc-left)))
							(setq middle (-  (:cc:ccdesc 1 (cc-left)) (:cc:ccdesc 0 (cc-right)) ))
						)


						;go to ball here
						(if (> bottom (* imageMiddleY .7))
							(progn 
								(setq yDistance (/ 8 (tan (+ delta (atan(/ (- bottom imageMiddleY) focalLength))))))
				
								;calculate the distance we need to turn
								(setq lastXPos middle)
								(setq y (- (idx-dim image 1) bottom))
								(setq aDistance (* (atan (/ x y)) (/ 180 3.14)))
				
								(printf "Middle: %d \n" middle)
								(printf "yDistance: %f - aDistance: %f\n" yDistance aDistance)
				
							
							)

						)
					)
					(print "lost the goal")
					(setq goalSeen f)
					(==> this findTheGoals)
					;(setq left (:cc:ccdesc 0 (cc-left)))
					;(setq right (:cc:ccdesc 0 (cc-right)))
					;(setq top (:cc:ccdesc 0 (cc-top)))
					;(setq bottom (:cc:ccdesc 0 (cc-bottom)))
			)
		)
		
		
			(print "lost the goal")
			(setq goalSeen f)
			(==> this findTheGoals)
		)
		
		(cons yDistance aDistance)
	)
)


(de main (&optional (ip "192.168.1.14") (id "admin") (pw "r0b0t0"))
	(let* (
			(rov (new rovio id pw ip 0))
			(window (x11-window 0 0 360 280 "Image"))
			(dist 0)
		)
		(==> rov changeBrightness 6) ;;make it so that we can see a bit better
		(==> rov changeQuality 10 3) ;;increase our image quality for a better read
		(==> rov head-down) ;;make sure the head is where it needs to be
		
		(while t
			(setq image (==> rov grab))
			
			(if :rov:hasBall
				(progn
					(print "I HAZ DA BALL")
					;(==> rov head-middle)
					(setq bbImage (threshold image [148 43 35] 26)) ;;for the tennis ball
					(==> rov showImage bbImage)
					(setq dist (==> rov findGoal bbImage))
					(==> rov goToGoal dist)
				)
			)
			;;if it doesn't have it then we look for it

			(if (= :rov:hasBall f)
				(progn
					(==> rov head-down)
					(setq bwImage (threshold image [117 145 43] 26)) ;;for the tennis ball
					(setq dist (==> rov getDistance bwImage))
					(==> rov showImage bwImage)
					(if :rov:ballSeen
						(==> rov goToBall dist)
					)					
				)
			)
			
			
			;; don't request too many images or it crashes
			(sleep .2)
		)
	)
)
