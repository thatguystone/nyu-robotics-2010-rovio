;load the image library
(libload "libimage/image-io")
(libload "libimage/morpho")

(de rgbToYuv (rgb)
	((-idx1- (-double-)) rgb)
	(let (
			;rgb-to-yuv conversion table
			(rgbToYuvTable [
					[ 0.299    0.587    0.114] 
					[-0.14713 -0.28886  0.436] 
					[ 0.615   -0.51499 -0.10001]
				]
			)
		)

		(idx-m2dotm1 rgbToYuvTable rgb)
	)
)

(de yuvDistance (p1 p2)
	((-idx1- (-double-)) p1)
	((-idx1- (-double-)) p2)
	(let* (
			(x (- (p1 1) (p2 1)))
			(y (- (p1 2) (p2 2)))
		)
		(sqrt (+ (* x x) (* y y)))
	)
)

;define how we threshold things
(de threshold (image match threshold) 
	;declare type for image
	((-idx3- (-ubyte-)) image)
	((-idx1- (-double-)) match)
	((-double-) threshold)
	
	;setup our threshold image
	(let* (
			(x (idx-dim image 1))
			(y (idx-dim image 0))
			(y2 (/ y 2))
			(bwImage
				(ubyte-matrix (/ y 2) x)
			)
			(yuvMatch (rgbToYuv match))
		)
		
		(setq image (narrow image 0 y2 y2)) 
		
		(idx-gloop ((row image) (i))
			(idx-gloop ((cell row) (j))
				(let (
						(cellV (matrix 3))
						(yuv (matrix 3))
					)
					
					(idx-gloop ((c cell) (m))
						(cellV m (c))
					)
					
					(setq yuv (rgbToYuv cellV))
					
					(if (> threshold (yuvDistance yuv yuvMatch))
						(bwImage i j 255)
						(bwImage i j 0)
					)
				)
			)
		)
		(ubim-erosion bwImage 3)
		(ubim-dilation bwImage 4)
		bwImage
	)
)

(dhc-make ()
	yuvDistance
	rgbToYuv
	threshold
)
